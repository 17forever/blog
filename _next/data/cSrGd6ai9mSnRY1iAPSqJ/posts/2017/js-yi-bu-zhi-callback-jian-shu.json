{"pageProps":{"id":["2017","js-yi-bu-zhi-callback-jian-shu"],"name":"js异步之callback简述","data":{"date":"2017-07-07","body":"js 及 nodejs 由于其单线程特性，对于应用中比较耗时的网络请求、磁盘操作均以异步形式完成。因此，经常看到如下形式\n\n```js\ngetLocation(res){\n   if(res.ok){\n     login(res){\n        if(res.ok){\n          setState()\n      }\n    }\n  }\n}\n```\n\ngetLocation 成功后才能执行 login 操作，login 成功后才能 setState 更新数据\n如果中间还要添加会阻塞当前应用进程的操作，且其数据依赖于上一部操作成功返回的结构，就需要写在上一步的成功回调下，这样嵌套层级越来越多，就会陷入所谓的“回调地狱”。对于此类问题的解决，有 es6 的 promise 和 es7 的 async/await，这里，我们不研究深层次的回调问题，只讨论当遇到这种情况时，如何将其封装成一个模块达到重复利用。\n\n以常用的 fetch 为例\n\n```js\nexport default function _update(url, data, callback) {\n  let init = {\n    credentials: 'include',\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    mode: 'cors',\n    body: JSON.stringify(data),\n  }\n\n  fetch(url, init)\n    .then((res) => res.json())\n    .then((res) => {\n      // fetch请求得到相应，根据回传的res执行下一步操作\n      callback(res)\n    })\n}\n```\n\n\\_update 为封装的一个通用 fetch 模块，接受请求 url，请求时发送给服务端的数据，以及请求成功时需要执行的回调函数三个参数。callback 的传递保证 fetch 在服务端有数据返回后调用，因此，可以像如下形式使用这个模块。\n\n```js\nimport update from 'update.js'\n\nupdate(\n  'https://xxx',\n  {\n    name: 'xm',\n    age: 12,\n  },\n  (res) => {\n    console.log(res)\n  },\n)\n```\n\n传递给 update 三个参数，对应于模块中的形参。\n调用函数中第三个函数参数\n\n```js\n;(res) => {\n  console.log(res)\n}\n```\n\n对应于模块中的 callback(res)，相当于\n\n```js\nfunction callback(res) {\n  console.log(res)\n}\n```\n\n如果在 update 前先要获取到当前位置\n\n```js\nfunction getLocation(callback){\n  ......\n  if(res){\n    callback(url)\n  }\n}\n```\n\n如果获取位置成功，将位置信息 res 传递给 update 函数，update 在 fetch 请求得到相应后刷新数据，那么将 getLocation 改造成如下即可\n\n```js\nfunction getLocation(callback){\n  ......\n  if(res){\n    callback('https://xxx', {\n      location: res\n    }, res => {\n      cosole.log(res)\n    })\n  }\n}\n```\n\n两个 res，一个是获取到位置回传的 res，另一个是 fetch 请求相应回传的 res\n调用只需要一行代码\n\n```js\ngetLocation(update)\n```\n\n可以将 update 的三个参数传递给 getLocation，达到更大的复用性。但这样一来，代码脉络不够清晰，显得有些累赘了。\n建议只有一层回调时使用这种封装方法，如果对方法有更好的设计，多层回调时也不妨一试。"},"allPosts":[{"date":"2021","list":[{"name":"绩效约谈后有感","date":"2021-02-24","path":"ji-xiao-yue-tan-hou-you-gan","groupDate":"2021"},{"name":"面对人生选择","date":"2021-02-20","path":"mian-dui-ren-sheng-xuan-ze","groupDate":"2021"},{"name":"我的生日","date":"2021-01-27","path":"wo-de-sheng-ri","groupDate":"2021"},{"name":"2021年初的一点思考","date":"2021-01-20","path":"2021-nian-chu-de-yi-dian-si-kao","groupDate":"2021"}]},{"date":"2020","list":[{"name":"win10下使用wls2和vscode配置超级舒服的开发环境 ","date":"2020-11-29","path":"win10-xia-shi-yong-wls2-he-vscode-pei-zhi-chao-ji-shu-fu-de-kai-fa-huan-jing","groupDate":"2020"},{"name":"Termux玩法","date":"2020-10-19","path":"Termux-wan-fa","groupDate":"2020"},{"name":"nextjs-with-styled-components-fluent-ui","date":"2020-09-03","path":"nextjs-with-styled-components-fluent-ui","groupDate":"2020"},{"name":"脂肪肝","date":"2020-08-30","path":"zhi-fang-gan","groupDate":"2020"}]},{"date":"2018","list":[{"name":"两个口袋","date":"2018-05-06","path":"liang-ge-kou-dai","groupDate":"2018"}]},{"date":"2017","list":[{"name":"JavaScript50行代码暴力生成9x9数独","date":"2017-10-12","path":"JavaScript50-hang-dai-ma-bao-li-sheng-cheng-9x9-shu-du","groupDate":"2017"},{"name":"域名解析小记","date":"2017-09-23","path":"yu-ming-jie-xi-xiao-ji","groupDate":"2017"},{"name":"nginx作用","date":"2017-09-23","path":"nginx-zuo-yong","groupDate":"2017"},{"name":"linux nginx配置https笔记","date":"2017-09-23","path":"linux-nginx-pei-zhi-https-bi-ji","groupDate":"2017"},{"name":"React Material-UI笔记-theme篇","date":"2017-09-20","path":"React-Material-UI-bi-ji--theme-pian","groupDate":"2017"},{"name":"js异步之callback简述","date":"2017-07-07","path":"js-yi-bu-zhi-callback-jian-shu","groupDate":"2017"},{"name":"python爬虫初体验","date":"2017-06-03","path":"python-pa-chong-chu-ti-yan","groupDate":"2017"},{"name":"redux-saga简单入门使用","date":"2017-05-08","path":"redux-saga-jian-dan-ru-men-shi-yong","groupDate":"2017"},{"name":"react-native触摸和动画实例","date":"2017-05-06","path":"react-native-chu-mo-he-dong-hua-shi-li","groupDate":"2017"},{"name":"react技术栈学习","date":"2017-02-27","path":"react-ji-shu-zhan-xue-xi","groupDate":"2017"},{"name":"es6 export和import相关","date":"2017-02-26","path":"es6-export-he-import-xiang-guan","groupDate":"2017"},{"name":"canvas交互之addHitRegion()接口的使用","date":"2017-02-16","path":"canvas-jiao-hu-zhi-addHitRegion()-jie-kou-de-shi-yong","groupDate":"2017"}]},{"date":"2015","list":[{"name":"学车随笔","date":"2015-08-21","path":"xue-che-sui-bi","groupDate":"2015"},{"name":"怀念我的部长-刘高","date":"2015-04-10","path":"huai-nian-wo-de-bu-chang---liu-gao","groupDate":"2015"}]}],"datePosts":[{"name":"JavaScript50行代码暴力生成9x9数独","date":"2017-10-12","path":"JavaScript50-hang-dai-ma-bao-li-sheng-cheng-9x9-shu-du"},{"name":"域名解析小记","date":"2017-09-23","path":"yu-ming-jie-xi-xiao-ji"},{"name":"nginx作用","date":"2017-09-23","path":"nginx-zuo-yong"},{"name":"linux nginx配置https笔记","date":"2017-09-23","path":"linux-nginx-pei-zhi-https-bi-ji"},{"name":"React Material-UI笔记-theme篇","date":"2017-09-20","path":"React-Material-UI-bi-ji--theme-pian"},{"name":"js异步之callback简述","date":"2017-07-07","path":"js-yi-bu-zhi-callback-jian-shu"},{"name":"python爬虫初体验","date":"2017-06-03","path":"python-pa-chong-chu-ti-yan"},{"name":"redux-saga简单入门使用","date":"2017-05-08","path":"redux-saga-jian-dan-ru-men-shi-yong"},{"name":"react-native触摸和动画实例","date":"2017-05-06","path":"react-native-chu-mo-he-dong-hua-shi-li"},{"name":"react技术栈学习","date":"2017-02-27","path":"react-ji-shu-zhan-xue-xi"},{"name":"es6 export和import相关","date":"2017-02-26","path":"es6-export-he-import-xiang-guan"},{"name":"canvas交互之addHitRegion()接口的使用","date":"2017-02-16","path":"canvas-jiao-hu-zhi-addHitRegion()-jie-kou-de-shi-yong"}]},"__N_SSG":true}