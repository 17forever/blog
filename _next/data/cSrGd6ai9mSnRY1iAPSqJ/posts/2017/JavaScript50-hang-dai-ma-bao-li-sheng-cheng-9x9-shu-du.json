{"pageProps":{"id":["2017","JavaScript50-hang-dai-ma-bao-li-sheng-cheng-9x9-shu-du"],"name":"JavaScript50行代码暴力生成9x9数独","data":{"date":"2017-10-12","body":"> 最初是用 react 写的，但核心代码完全是原生 js，做些小的改动还能移植到小程序，核心生成数独代码只有 50 行，实现效果如下\n\n![case.gif](http://upload-images.jianshu.io/upload_images/864719-ff30692945608f7d.gif?imageMogr2/auto-orient/strip){referrerPolicy=no-referrer}\n\n## 基本思路\n\n暴力生成，比如从数字 1 开始，第一行，随机一个位置放 1，第二行起，除了确定当前纵列没有 1，每一个小九宫格也不应有 1。数字 1 在每一行放置完后从第一行起放置 2。如图示：\n\n![image.png](http://upload-images.jianshu.io/upload_images/864719-4c33f95d4881e46e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/270)\n\n## 代码实现\n\n1. 入口函数，在 react 的`componentWillMount`处调用\n\n```js\n  handleGenerateSudoku(){\n    if(this.state.btnDisabled){\n      return\n    }\n    // 重点是这一行和下面的while循环\n    this.generateSudokuSuccess = false\n    this.setState({\n      btnDisabled: true,\n      array: null\n    })\n    let result = null\n\n    // 当数独未生成成功时，持续调用\n    while(!this.generateSudokuSuccess){\n      result = this.generateSudoku()\n      // console.log(result)\n    }\n    this.setState({\n      btnDisabled: false,\n      array: result\n    })\n  }\n```\n\n2. 下面开始为每一个数字寻找合适位置\n   1. 当前行： 正在处理数独哪一行\n   2. 当前数字： 正在为 1-9 哪个数字分配位置索引\n\n```js\n   generateSudoku(){\n\n    /**\n     * 首先创建一个9x9二位数组array，如[[undefined, undefined, ...], [..], [..],...[..]]\n     * array代表整个数独容器\n     * array的第一个索引array[x]代表数独的每一行，array[x][y]表示每一个单元格，填充单个数字。\n     */\n    let array = new Array(9)\n\n    // new Array创建的数组默认填充undefined，使用map等函数式方法无法遍历\n    for(let i=0; i<9; i++){\n      array[i] = new Array(9)\n    }\n\n    /**\n     * 时间戳的作用是避免某一数字在各行索引生成失败而长时间循环下去。\n     * 在实际应用中，如果前面的数字随机的不合理，会导致数独无解\n     * 设置一个时间戳，当一定时间后，这里是1000ms后，如果数独仍未生成成功，返回这个函数\n     * 在while内部的else if 代码块中如果超时，返回到上面第1步从第一行重新生成数独\n     * 这种处理方法不好，有待优化\n     */\n    let time = new Date().getTime()\n\n    // 1-9共9个数字，所以循环9次，为每个数字寻找合适的位置索引\n    for(let j=0; j<9; j++){\n      // 存放当前数字合法位置索引的地方，比如，上图中数字1（当前数字）的合法索引为[2, 5, 7, 6, 1, 4, 3, 8, 0]\n      let idxInList\n      // 当前数字的索引是否分配完毕，默认没有\n      let notComplete = true\n      while (notComplete) {\n        idxInList = []\n        // 循环数独每一行，即在每一行为当前数字寻找索引\n        // 将数独当前行的数字填充情况、当前第几行和当前数字的合法索引位置传进去处理\n        // 返回一个索引位置，表示当前数字在当前行应填充的位置\n        for(let k=0; k<9; k++){\n          let avalibIdx = this.avalibleIdx(array[k], k, idxInList)\n          // 如果返回的位置有效，更新当前数字的索引位置\n          if(avalibIdx !== undefined){\n            idxInList.push(avalibIdx)\n          }\n        }\n\n        // for循环完成后\n\n        // 如果当前数字在每一行的9个索引位置全部查找完毕，完成，退出while循环\n        if (idxInList.length === 9){\n          notComplete = false\n        } else if (new Date().getTime() - time > 1000){\n          // 超时的话返回这个函数，从1重新开始生成数独\n          return\n        }\n        // 否则继续while循环，将当前数字从第一行重新安排位置\n      }\n\n      // 要return，不map\n      // 如果while循环出来，说明当前数字的位置索引完成，更新array\n      for(let n=0; n<idxInList.length; n++){\n        array[n][idxInList[n]] = j+1\n        if(j===8 && n===8){\n          // 如果是第8个数字，即9，说明所有数字的位置更新完成。整个数独生成完毕，返回array结果\n          this.generateSudokuSuccess = true\n          return array\n        }\n      }\n    }\n  }\n```\n\n3. 下面是为当前数字分配一个索引位置的操作，这里处理的是当前数字在当前行（具体的某一行）的可能性\n\n```js\n  // 每行分为3块，即三个九宫格，同一数字在三行内不处于同一块\n  /**\n   *\n   * @param {Array} rowList - 数独当前行的数字填充情况\n   * @param {Number} idxOfRowList - 数独第几行\n   * @param {Array} idxInList - 当前数字在每行所处位置，即位置索引\n   */\n  avalibleIdx(rowList, idxOfRowList, idxInList){\n    // 存储当前数字在当前行所有可能的存储位置\n    // 比如数独第一行时，应有9个位置\n    // 第二行时，除去一个九宫格，有6个可能的位置\n    // 第三行只有3个合法位置\n    // 但是第四行，去除九宫格限制，减去不能同列的位置，有6个合法位置\n    // ...\n    let avalibleList = []\n    // 循环数独当前行的每一个单元格，只有是undefined（没有数字填充）并且在已有的位置索引记录中不同于该位置（即排除相同列）继续\n    for(let m=0; m<9; m++){\n      if(rowList[m] === undefined && idxInList.indexOf(m)===-1){\n        // 在1，4，7行，即array[0], array[3], array[6] 这三行不受九宫格限制\n        // 只要是undefined就把该位置的索引记录下来\n        if(idxOfRowList % 3 === 0){\n          avalibleList.push(m)\n        } else {\n\n          // 在2，3，5，6，8，9行，受九宫格限制，需排除掉\n          // 找出当前数字在上一行的索引位置，如果与当前行正在循环的索引位置处于同一个九宫格区间，跳过\n          // 2，5，8行比对的是九宫格第一行；3，6，9比对第二行\n          // 如果不在同一个九宫格区间，且不是第3， 6， 9行，记录该位置\n          let blockLastIndex = idxInList[idxInList.length - 1]\n          if(( blockLastIndex < 3 && m < 3) || ( (blockLastIndex>=3 && blockLastIndex<6) && (m>=3 && m<6) ) || ( blockLastIndex >= 6 && m >= 6) ) {\n            continue\n          } else {\n            // 在3，6，9行\n            // 找出当前数字在上上一行（即九宫格第一行）的索引位置，如果与当前行正在循环的索引位置处于同一个九宫格区间，跳过\n            // 否则记录该位置\n            if(idxOfRowList % 3 === 2){\n              let blockAheadIdx = idxInList[idxInList.length - 2]\n              if(( blockAheadIdx < 3 && m < 3) || ( (blockAheadIdx>=3 && blockAheadIdx<6) && (m>=3 && m<6) ) || ( blockAheadIdx >= 6 && m >= 6) ) {\n                continue\n              }\n            }\n            avalibleList.push(m)\n          }\n        }\n      }\n    }\n\n    // 去重记录的合法位置索引，并随机一个返回，作为当前数字在当前行的合法位置记录在idxInList数组\n    let resultList = Array.from(new Set(avalibleList))\n    return resultList[Math.floor(Math.random() * resultList.length)]\n\n  }\n```\n\n> 完整代码在[这里](https://github.com/17forever/sudoLite/blob/react/src/main/main.js)\n\n## 移植到小程序\n\n代码经过补充，具备一个基本数独小游戏的功能，已移植到小程序，详见[sudoLite](https://github.com/17forever/sudoLite)\n\n![sudoLite](http://upload-images.jianshu.io/upload_images/864719-b9b3fca5b25e2460.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/270)\n\n> sudoLite 是一款轻巧、趣萌、界面精美，具备统计、排行（即将推出），开源、免费、无广告的数独小程序\n\n### 截图\n\n#### 主页\n\n![image.png](http://upload-images.jianshu.io/upload_images/864719-07cc3bdcbc8333ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/270)\n\n#### 统计\n\n![image.png](http://upload-images.jianshu.io/upload_images/864719-b123b6411a1fd3e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/270)\n\n### ENJOY\n\n![image.png](http://upload-images.jianshu.io/upload_images/864719-24e737f713e92516.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/270)"},"allPosts":[{"date":"2021","list":[{"name":"绩效约谈后有感","date":"2021-02-24","path":"ji-xiao-yue-tan-hou-you-gan","groupDate":"2021"},{"name":"面对人生选择","date":"2021-02-20","path":"mian-dui-ren-sheng-xuan-ze","groupDate":"2021"},{"name":"我的生日","date":"2021-01-27","path":"wo-de-sheng-ri","groupDate":"2021"},{"name":"2021年初的一点思考","date":"2021-01-20","path":"2021-nian-chu-de-yi-dian-si-kao","groupDate":"2021"}]},{"date":"2020","list":[{"name":"win10下使用wls2和vscode配置超级舒服的开发环境 ","date":"2020-11-29","path":"win10-xia-shi-yong-wls2-he-vscode-pei-zhi-chao-ji-shu-fu-de-kai-fa-huan-jing","groupDate":"2020"},{"name":"Termux玩法","date":"2020-10-19","path":"Termux-wan-fa","groupDate":"2020"},{"name":"nextjs-with-styled-components-fluent-ui","date":"2020-09-03","path":"nextjs-with-styled-components-fluent-ui","groupDate":"2020"},{"name":"脂肪肝","date":"2020-08-30","path":"zhi-fang-gan","groupDate":"2020"}]},{"date":"2018","list":[{"name":"两个口袋","date":"2018-05-06","path":"liang-ge-kou-dai","groupDate":"2018"}]},{"date":"2017","list":[{"name":"JavaScript50行代码暴力生成9x9数独","date":"2017-10-12","path":"JavaScript50-hang-dai-ma-bao-li-sheng-cheng-9x9-shu-du","groupDate":"2017"},{"name":"域名解析小记","date":"2017-09-23","path":"yu-ming-jie-xi-xiao-ji","groupDate":"2017"},{"name":"nginx作用","date":"2017-09-23","path":"nginx-zuo-yong","groupDate":"2017"},{"name":"linux nginx配置https笔记","date":"2017-09-23","path":"linux-nginx-pei-zhi-https-bi-ji","groupDate":"2017"},{"name":"React Material-UI笔记-theme篇","date":"2017-09-20","path":"React-Material-UI-bi-ji--theme-pian","groupDate":"2017"},{"name":"js异步之callback简述","date":"2017-07-07","path":"js-yi-bu-zhi-callback-jian-shu","groupDate":"2017"},{"name":"python爬虫初体验","date":"2017-06-03","path":"python-pa-chong-chu-ti-yan","groupDate":"2017"},{"name":"redux-saga简单入门使用","date":"2017-05-08","path":"redux-saga-jian-dan-ru-men-shi-yong","groupDate":"2017"},{"name":"react-native触摸和动画实例","date":"2017-05-06","path":"react-native-chu-mo-he-dong-hua-shi-li","groupDate":"2017"},{"name":"react技术栈学习","date":"2017-02-27","path":"react-ji-shu-zhan-xue-xi","groupDate":"2017"},{"name":"es6 export和import相关","date":"2017-02-26","path":"es6-export-he-import-xiang-guan","groupDate":"2017"},{"name":"canvas交互之addHitRegion()接口的使用","date":"2017-02-16","path":"canvas-jiao-hu-zhi-addHitRegion()-jie-kou-de-shi-yong","groupDate":"2017"}]},{"date":"2015","list":[{"name":"学车随笔","date":"2015-08-21","path":"xue-che-sui-bi","groupDate":"2015"},{"name":"怀念我的部长-刘高","date":"2015-04-10","path":"huai-nian-wo-de-bu-chang---liu-gao","groupDate":"2015"}]}],"datePosts":[{"name":"JavaScript50行代码暴力生成9x9数独","date":"2017-10-12","path":"JavaScript50-hang-dai-ma-bao-li-sheng-cheng-9x9-shu-du"},{"name":"域名解析小记","date":"2017-09-23","path":"yu-ming-jie-xi-xiao-ji"},{"name":"nginx作用","date":"2017-09-23","path":"nginx-zuo-yong"},{"name":"linux nginx配置https笔记","date":"2017-09-23","path":"linux-nginx-pei-zhi-https-bi-ji"},{"name":"React Material-UI笔记-theme篇","date":"2017-09-20","path":"React-Material-UI-bi-ji--theme-pian"},{"name":"js异步之callback简述","date":"2017-07-07","path":"js-yi-bu-zhi-callback-jian-shu"},{"name":"python爬虫初体验","date":"2017-06-03","path":"python-pa-chong-chu-ti-yan"},{"name":"redux-saga简单入门使用","date":"2017-05-08","path":"redux-saga-jian-dan-ru-men-shi-yong"},{"name":"react-native触摸和动画实例","date":"2017-05-06","path":"react-native-chu-mo-he-dong-hua-shi-li"},{"name":"react技术栈学习","date":"2017-02-27","path":"react-ji-shu-zhan-xue-xi"},{"name":"es6 export和import相关","date":"2017-02-26","path":"es6-export-he-import-xiang-guan"},{"name":"canvas交互之addHitRegion()接口的使用","date":"2017-02-16","path":"canvas-jiao-hu-zhi-addHitRegion()-jie-kou-de-shi-yong"}]},"__N_SSG":true}